#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
###############################################################################
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################


# The check has been developed using a Netscreen on
#   Juniper SSG-520 version 6.2.0r4.0 (Firewall+VPN) and
#   Juniper SSG5-Serial version 6.1.0r2.0 (Firewall+VPN)
#
# +------------------------------------------------------------------+
# | This file has been contributed by:                               |
# |                                                                  |
# | Václav Ovsík <vaclav.ovsik@gmail.com>             Copyright 2012 |
# +------------------------------------------------------------------+

# Example info:
#   [['115018288', '586510736', '34']]
#

# Default memory usage levels [%]
netscreen_mem_default_levels = (80, 90)

def inventory_netscreen_mem(info):
    if len(info) != 1:
        return
    if len(info[0]) != 2:
        return
    return [ (None, 'netscreen_mem_default_levels') ]

def check_netscreen_mem(item, params, info):
    (memalloc, memleft) = [ saveint(x) for x in info[0] ]
    memtotal = memalloc + memleft
    memusage = ( 100 * memalloc + memtotal / 2 ) / memtotal
    status = 0
    txt = 'Memory usage %d%%' % memusage
    if params:
        (warn, crit) = params
    else:
        warn = crit = None
    if crit and memusage >= crit:
        txt += ' (!! >%d)' % crit
        status = max(status, 2)
    elif warn and memusage >= warn:
        txt += ' (! >%d)' % warn
        status = max(status, 1)
    return (status,
            {0:'OK', 1:'WARN', 2:'CRIT'}[status] + ' - ' + txt,
            (('usage', str(memusage)+'%', warn, crit),))


check_info['netscreen_mem'] = (check_netscreen_mem, "Memory",
        1, inventory_netscreen_mem)

snmp_info['netscreen_mem'] = ( '.1.3.6.1.4.1.3224.16.2', [
        '1',    # NETSCREEN-RESOURCE-MIB::nsResMemAllocate
        '2',    # NETSCREEN-RESOURCE-MIB::nsResMemLeft
    ])

snmp_scan_functions['netscreen_mem'] = \
        lambda oid: oid('.1.3.6.1.2.1.1.2.0').startswith('.1.3.6.1.4.1.3224.1')
